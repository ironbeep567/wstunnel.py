import hashlib, base64
import totp

def b16decode(s):
    return base64.b16decode(s, True)

# Test vectors in RFC6238
KEYS = [
    (hashlib.sha1,   "3132333435363738393031323334353637383930"),
    (hashlib.sha256, "3132333435363738393031323334353637383930313233343536373839303132"),
    (hashlib.sha512, "31323334353637383930313233343536373839303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334"),
]
TEST_VECTORS = [
    (0, 59, "94287082"),
    (1, 59, "46119246"),
    (2, 59, "90693936"),
    (0, 1111111109, "07081804"),
    (1, 1111111109, "68084774"),
    (2, 1111111109, "25091201"),
    (0, 1111111111, "14050471"),
    (1, 1111111111, "67062674"),
    (2, 1111111111, "99943326"),
    (0, 1234567890, "89005924"),
    (1, 1234567890, "91819424"),
    (2, 1234567890, "93441116"),
    (0, 2000000000, "69279037"),
    (1, 2000000000, "90698825"),
    (2, 2000000000, "38618901"),
    (0, 20000000000, "65353130"),
    (1, 20000000000, "77737706"),
    (2, 20000000000, "47863826"),
]

def test_totp():
    for kid,t,otp in TEST_VECTORS:
        print(kid,t,otp)
        digest,key = KEYS[kid]
        key = b16decode(key)
        assert otp == totp.TOTP(key, digest=digest).calculate_otp(t)

